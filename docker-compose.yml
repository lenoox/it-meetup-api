version: "3.8"

services:
  ts-node-docker:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    platform: linux/amd64
    volumes:
      - ./:/app
      - ./nodemon.json:/home/node/app/nodemon.json
    container_name: ts-node-docker
    ports:
      - 3000:3000
    command: npm run dev
    environment:
      - DB_HOST=mongodb
      - DB_USER=$MONGODB_USER
      - DB_PASSWORD=$MONGODB_PASSWORD
      - DB_NAME=$MONGODB_DATABASE
      - DB_PORT=$MONGODB_PORT
    networks:
      - meetup_network
  mongo:
    build:
      context: ./mongodb_replica
      args:
        MONGO_VERSION: 4
    environment:
      MONGO_REPLICA_HOST: mongo
      MONGO_REPLICA_PORT: 27017
      # Use "mongosh" instead of "mongo" for v5+
      MONGO_COMMAND: "mongo"
    ports:
      - "27017:27017"
    restart: unless-stopped
    healthcheck:
      # Use "mongosh" instead of "mongo" for v5+
      test:
        [
          "CMD",
          "mongo",
          "admin",
          "--port",
          "27017",
          "--eval",
          "db.adminCommand('ping').ok",
        ]
      interval: 5s
      timeout: 2s
      retries: 20
    networks:
      - meetup_network
  mongo_admin:
    image: mongo-express
    restart: always
    container_name: mongo_ui
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_AUTH_USERNAME: root
      ME_CONFIG_MONGODB_AUTH_PASSWORD: example
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://mongo:27017
    networks:
      - meetup_network
volumes:
  db:
networks:
  meetup_network:
    external: false
    name: meetup_network